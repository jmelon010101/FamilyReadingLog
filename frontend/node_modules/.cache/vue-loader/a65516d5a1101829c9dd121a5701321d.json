{"remainingRequest":"/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/src/components/AddChildActivity.vue?vue&type=template&id=40e8585a&scoped=true&","dependencies":[{"path":"/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/src/components/AddChildActivity.vue","mtime":1586912121803},{"path":"/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/musicmaster/Desktop/capstone4/capstone-family_reading/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}